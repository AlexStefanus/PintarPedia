package com.kelompok7pbo.finalprojectpbo;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.UIManager;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.TableColumnModel;

public class Home extends javax.swing.JFrame {
    private Connection connection;
    private int userId;
    private static final Logger LOGGER = Logger.getLogger(Home.class.getName());
    private Map<Integer, Integer> articleIdMap = new HashMap<>();

    public Home(Connection connection, int userId) {
        this.connection = connection;
        this.userId = userId;
        initComponents();
        jTable1.setRowHeight(30);
        columnCustomization(this.jTable1);
        setVisible(true);
        setLocationRelativeTo(null);

        jTextField1.setForeground(java.awt.Color.GRAY);
        jTextField1.addFocusListener(new FocusListener() {
    @Override
    public void focusGained(FocusEvent e) {
        if (jTextField1.getText().equals("Search..")) {
            jTextField1.setText("");
            jTextField1.setForeground(java.awt.Color.BLACK);
        }
    }

    @Override
    public void focusLost(FocusEvent e) {
        if (jTextField1.getText().isEmpty()) {
            jTextField1.setForeground(java.awt.Color.GRAY);
            jTextField1.setText("Search..");
            // Perform search when focus is lost and field is empty
            searchTable("");
        } else {
            // Perform search when focus is lost and field is not empty
            searchTable(jTextField1.getText());
        }
    }
});

jTextField1.getDocument().addDocumentListener(new DocumentListener() {
    @Override
    public void insertUpdate(DocumentEvent e) {
        if (!jTextField1.getText().isEmpty()) {
            searchTable(jTextField1.getText());
        }
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        if (!jTextField1.getText().isEmpty()) {
            searchTable(jTextField1.getText());
        } else {
            searchTable("");
        }
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        if (!jTextField1.getText().isEmpty()) {
            searchTable(jTextField1.getText());
        }
    }
});

        showTable("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        buttonDashboard = new javax.swing.JToggleButton();
        jLabel5 = new javax.swing.JLabel();
        buttonBookmarks = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(153, 204, 255));

        buttonDashboard.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        buttonDashboard.setText("Dashboard");
        buttonDashboard.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        buttonDashboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDashboardActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PintarPedia (1).png"))); // NOI18N

        buttonBookmarks.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        buttonBookmarks.setText("My Bookmarks");
        buttonBookmarks.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        buttonBookmarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBookmarksActionPerformed(evt);
            }
        });

        jTextField1.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(30, 30, 30));
        jLabel1.setText("Search");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonDashboard, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonBookmarks, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 227, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addContainerGap(19, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(buttonBookmarks, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonDashboard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(10, 10, 10))))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 60));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object[][] {},
            new String[] {
                "No", "Judul", "Konten", "Kategori", "Tanggal", "Aksi"
            }) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return column == 5;
                }
            }
        );
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 788, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 800, 390));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_jTextField1ActionPerformed

    private void buttonBookmarksActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_buttonBookmarksActionPerformed
        dispose();
        new Bookmark(this.connection, this.userId);
    }// GEN-LAST:event_buttonBookmarksActionPerformed

    private void buttonDashboardActionPerformed(java.awt.event.ActionEvent evt) {
        dispose();
        new Dashboard(this.connection, this.userId);
    }// GEN-LAST:event_jButton1ActionPerformed

    private void showTable(String searchText) {
    try {
        String query = "SELECT a.*, c.NAMA_CATEGORY FROM articles a JOIN categories c ON a.CATEGORY_ID = c.CATEGORY_ID WHERE (a.JUDUL_ARTICLE LIKE ? OR a.KONTEN_ARTICLE LIKE ? OR c.NAMA_CATEGORY LIKE ?) AND a.STATUS_ARTICLE = 'Accepted'";
        PreparedStatement pst = connection.prepareStatement(query);
        String searchPattern = "%" + searchText + "%";
        pst.setString(1, searchPattern);
        pst.setString(2, searchPattern);
        pst.setString(3, searchPattern);
        ResultSet rs = pst.executeQuery();

        DefaultTableModel DFT = (DefaultTableModel) jTable1.getModel();
        DFT.setRowCount(0);

        int rowIndex = 1;
        while (rs.next()) {
            int articleId = rs.getInt("ARTICLE_ID");
            articleIdMap.put(rowIndex - 1, articleId);
            Vector<Object> v2 = new Vector<>();
            v2.add(rowIndex);
            v2.add(rs.getString("JUDUL_ARTICLE"));
            v2.add(rs.getString("KONTEN_ARTICLE"));
            v2.add(rs.getString("NAMA_CATEGORY"));
            v2.add(rs.getString("TANGGAL_ARTICLE"));
            v2.add("View");

            DFT.addRow(v2);
            rowIndex++;
        }
        rs.close();
        pst.close();

        TableColumnModel columnModel = jTable1.getColumnModel();
        columnModel.getColumn(5).setCellRenderer(new ButtonRenderer());
        columnModel.getColumn(5).setCellEditor(new ButtonEditor(new JCheckBox()));
    } catch (SQLException ex) {
        LOGGER.log(Level.SEVERE, null, ex);
    }
}

    private void searchTable(String searchText) {
        showTable(searchText);
    }

    class ButtonRenderer extends JButton implements TableCellRenderer {
        public ButtonRenderer() {
            setOpaque(true);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            if (isSelected) {
                setForeground(table.getSelectionForeground());
                setBackground(table.getSelectionBackground());
            } else {
                setForeground(table.getForeground());
                setBackground(UIManager.getColor("Button.background"));
            }
            setText((value == null) ? "View" : value.toString());
            return this;
        }
    }

    class ButtonEditor extends DefaultCellEditor {
        protected JButton button;
        private String label;
        private boolean isPushed;
        private int row;

        public ButtonEditor(JCheckBox checkBox) {
            super(checkBox);
            button = new JButton();
            button.setOpaque(true);
            button.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    fireEditingStopped();
                    dispose();
                    int articleId = articleIdMap.get(row);
                    new ShowArticle(articleId, connection, userId).setVisible(true);
                }
            });
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value,
                boolean isSelected, int row, int column) {
            if (isSelected) {
                button.setForeground(table.getSelectionForeground());
                button.setBackground(table.getSelectionBackground());
            } else {
                button.setForeground(table.getForeground());
                button.setBackground(table.getBackground());
            }
            label = (value == null) ? "View" : value.toString();
            button.setText(label);
            isPushed = true;
            this.row = row;
            return button;
        }

        @Override
        public Object getCellEditorValue() {
            isPushed = false;
            return label;
        }

        @Override
        public boolean stopCellEditing() {
            isPushed = false;
            return super.stopCellEditing();
        }

        @Override
        protected void fireEditingStopped() {
            super.fireEditingStopped();
        }
    }

    public static void columnCustomization(JTable table) {
        // Get the table column model
        TableColumnModel columnModel = table.getColumnModel();

        if (columnModel.getColumnCount() >= 5) {
            TableColumn firstNameColumn = columnModel.getColumn(0);
            firstNameColumn.setPreferredWidth(30); // Preferred width
            firstNameColumn.setMinWidth(20); // Minimum width
            firstNameColumn.setMaxWidth(50); // Maximum width
            TableColumn secondNameColumn = columnModel.getColumn(1);
            secondNameColumn.setPreferredWidth(150); // Preferred width
            secondNameColumn.setMinWidth(100); // Minimum width
            secondNameColumn.setMaxWidth(180); // Maximum width
            TableColumn thirdtNameColumn = columnModel.getColumn(2);
            thirdtNameColumn.setPreferredWidth(180); // Preferred width
            thirdtNameColumn.setMinWidth(150); // Minimum width
            thirdtNameColumn.setMaxWidth(200); // Maximum width
            TableColumn fourthNameColumn = columnModel.getColumn(3);
            fourthNameColumn.setPreferredWidth(80); // Preferred width
            fourthNameColumn.setMinWidth(50); // Minimum width
            fourthNameColumn.setMaxWidth(100); // Maximum width
            TableColumn fifthNameColumn = columnModel.getColumn(4);
            fifthNameColumn.setPreferredWidth(150); // Preferred width
            fifthNameColumn.setMinWidth(120); // Minimum width
            fifthNameColumn.setMaxWidth(160); // Maximum width
            // TableColumn sixthNameColumn = columnModel.getColumn(5);
            // sixthNameColumn.setPreferredWidth(60); // Preferred width
            // sixthNameColumn.setMinWidth(40); // Minimum width
            // sixthNameColumn.setMaxWidth(80); // Maximum width
        }

        // Iterate through each column and set resizable to false
        for (int i = 0; i < columnModel.getColumnCount(); i++) {
            TableColumn column = columnModel.getColumn(i);
            column.setResizable(false);
        }

        // Create a custom cell renderer
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);

        // Apply the custom renderer to all columns
        TableColumnModel columnModelCenterer = table.getColumnModel();
        for (int i = 0; i < columnModelCenterer.getColumnCount(); i++) {
            columnModelCenterer.getColumn(i).setCellRenderer(centerRenderer);
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonBookmarks;
    private javax.swing.JToggleButton buttonDashboard;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
